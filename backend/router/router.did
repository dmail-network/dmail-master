type CallerToken = record { priv_key_init : text; private_key : text };
type CanisterStatus = record {
  status : Status;
  memory_size : nat;
  cycles : nat;
  settings : DefiniteCanisterSettings;
  module_hash : opt vec nat8;
};
type DefiniteCanisterSettings = record {
  freezing_threshold : nat;
  controllers : vec principal;
  memory_allocation : nat;
  compute_allocation : nat;
};
type InitArgs = record { name : opt text; custodians : opt vec principal };
type Result = variant { Ok : vec principal; Err : text };
type Result_1 = variant { Ok : principal; Err : text };
type Result_2 = variant { Ok; Err : text };
type Result_3 = variant { Ok : opt CallerToken; Err : text };
type Result_4 = variant { Ok : vec vec principal; Err : text };
type Result_5 = variant { Ok : opt principal; Err : text };
type Result_6 = variant { Ok : nat64; Err : text };
type Result_7 = variant { Ok : CanisterStatus; Err : text };
type Status = variant { stopped; stopping; running };
service : (opt InitArgs) -> {
  batchQueryPidByCids : (vec principal) -> (Result) query;
  bindCid : (principal, principal) -> (Result_1);
  changeBindCid : () -> (Result_2);
  createCidByPid : (principal) -> (Result_1);
  getCallerToken : (text) -> (Result_3) query;
  queryAllCid : () -> (Result_4) query;
  queryAllUpdate : () -> (Result_2);
  queryCidByPid : (principal) -> (Result_5) query;
  queryPidByCid : (principal) -> (Result_5) query;
  query_all_cid_by_split : (nat64, nat64) -> (Result_4) query;
  query_all_cid_len : () -> (Result_6) query;
  query_all_pid_len : () -> (Result_6) query;
  setCustodians : (vec principal) -> ();
  singleCanisterStatus : (principal) -> (Result_7);
  singleCanisterUpdateCode : (principal) -> (Result_2);
  singleDepositCycles : (principal) -> (Result_2);
  singleUpdateSettings : (principal) -> (Result_2);
}